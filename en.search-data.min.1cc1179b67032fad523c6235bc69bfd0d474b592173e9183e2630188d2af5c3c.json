[{"id":0,"href":"/integration/docs/services/service_communications/","title":"Service Communications","section":"Docs","content":"Events #  The diagram summarizes the event-base communication between all microservices. Kafka is used as the message broker.\n mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart TB click ifrs \"../ifrs\" ifrs(Internal File Registry Service):::srcClass -- |\"file_registered\"| ifrs_internal_file_registry[internal_file_registry] ifrs_internal_file_registry[internal_file_registry] -- |\"file_registered\"| dcs(Download Controller Service):::srcClass click dcs \"../dcs\" ifrs_internal_file_registry[internal_file_registry] -- |\"file_registered\"| ucs(Upload Controller Service):::srcClass click ucs \"../ucs\" ifrs_internal_file_registry:::endClass ifrs(Internal File Registry Service):::srcClass -- |\"file_staged_for_download\"| ifrs_internal_file_registry[internal_file_registry] ifrs_internal_file_registry:::endClass click irs \"../irs\" irs(Interrogation Room Service):::srcClass -- |\"file_validation_success\"| irs_file_interrogation[file_interrogation] irs_file_interrogation[file_interrogation] -- |\"file_validation_success\"| ifrs(Internal File Registry Service):::srcClass click ifrs \"../ifrs\" irs_file_interrogation:::endClass irs(Interrogation Room Service):::srcClass -- |\"file_validation_failure\"| irs_file_interrogation[file_interrogation] irs_file_interrogation[file_interrogation] -- |\"file_validation_failure\"| ucs(Upload Controller Service):::srcClass click ucs \"../ucs\" irs_file_interrogation:::endClass click ucs \"../ucs\" ucs(Upload Controller Service):::srcClass -- |\"file_upload_received\"| ucs_file_uploads[file_uploads] ucs_file_uploads[file_uploads] -- |\"file_upload_received\"| irs(Interrogation Room Service):::srcClass click irs \"../irs\" ucs_file_uploads:::endClass classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF REST API #  The diagram summarizes the REST API communication between all microservices.\n%%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart RL subgraph ekss [Encryption Key Store Service] ekss_0[\"/secrets\"]::::endClass end ekss:::srcClass subgraph irs [Interrogation Room Service] end irs:::srcClass click irs \"../irs\" irs ---|\"POST\"| ekss_0 ekss_0:::endClass classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF "},{"id":1,"href":"/integration/docs/services/dcs/","title":"Download Controller Service","section":"Docs","content":"Download Controller Service #  0.4.0-14-g4315c66-main\nghga-de/download-controller-service\nghga/download-controller-service\nSummary #  Provided #  REST API #  This service provides a REST API with the following endpoints:\nOpen in Swagger Editor\n   Method Path Consumers     GET /objects/{object_id}     Events #  This service publishes the following event types through a message broker:\n   Topic Type Consumers     file_downloads download_served    file_downloads file_registered    file_downloads unstaged_download_requested     Consumed #  REST API #  This service not relies on any REST endpoints\nEvents #  This service consumes the following events through the message broker:\n   Topic Type Producers     internal_file_registry file_registered Internal File Registry Service     mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph c1 [consumer] dcs(Download Controller Service):::srcClass end subgraph t1 [topics] dcs_internal_file_registry[internal_file_registry]:::endClass end todo(TODO):::srcClass -- |\"file_registered\"| dcs_internal_file_registry[internal_file_registry] dcs_internal_file_registry[internal_file_registry] -- |\"file_registered\"| dcs click dcs \"../dcs\" todo(TODO):::srcClass click todo(TODO) \"../\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Configuration #  The service can be configured using the following configuration variables:\n   Name Description     host The hostname or IP address to bind the HTTP server to   port The port to bind the HTTP server to   kafka_servers A list of Apache Kafka servers to connect to   unstaged_download_event_topic An Apache Kafka event topic   unstaged_download_event_type An Apache Kafka event schema   file_registered_event_topic An Apache Kafka event topic   file_registered_event_type An Apache Kafka event schema   files_to_register_topic An Apache Kafka event topic   files_to_register_type An Apache Kafka event schema   download_served_event_topic An Apache Kafka event topic   download_served_event_type An Apache Kafka event schema   db_connection_str The MongoDB connection URI   db_name The MongoDB database name   s3_endpoint_url The S3 endpoint URL   s3_access_key_id The S3 access key ID   s3_secret_access_key The S3 secret access key    "},{"id":2,"href":"/integration/docs/services/ekss/","title":"Encryption Key Store Service","section":"Docs","content":"Encryption Key Store Service #  0.0.0-22-4d92c54-main\nghga-de/encryption-key-store-service\nghga/encryption-key-store-service\nSummary #  Provided #  REST API #  This service provides a REST API with the following endpoints:\nOpen in Swagger Editor\n   Method Path Consumers     POST /secrets Interrogation Room Service   GET /secrets/{secret_id}/envelopes/{client_pk}      mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart RL subgraph ekss [Encryption Key Store Service] 0[\"/secrets\"]::::endClass 1[\"/secrets/{secret_id}/envelopes/{client_pk}\"]::::endClass end ekss:::srcClass subgraph irs [Interrogation Room Service] end irs:::srcClass click irs \"../irs\" irs ---|\"POST\"| 0 0:::endClass classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Events #  This service publishes no events through a message broker\nConsumed #  REST API #  This service not relies on any REST endpoints\nEvents #  This service consumes no events through the message broker\nConfiguration #  The service can be configured using the following configuration variables:\n   Name Description     host The hostname or IP address to bind the HTTP server to   port The port to bind the HTTP server to    "},{"id":3,"href":"/integration/docs/services/ifrs/","title":"Internal File Registry Service","section":"Docs","content":"Internal File Registry Service #  0.3.0-20-g82f39eb-main\nghga-de/internal-file-registry-service\nghga/internal-file-registry-service\nSummary #  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque pellentesque posuere ante, ac porttitor nulla eleifend quis. Mauris eget aliquam diam. Duis laoreet blandit luctus. Donec at lacus porta, bibendum lectus dignissim, eleifend est. Etiam sit amet blandit dui. Cras id ante et neque hendrerit vulputate non aliquam eros.\nProvided #  REST API #  This service provides no REST API endpoints\nEvents #  This service publishes the following event types through a message broker:\n   Topic Type Consumers     internal_file_registry file_registered Download Controller ServiceUpload Controller Service   internal_file_registry file_staged_for_download      mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph t1 [topics] ifrs_internal_file_registry[internal_file_registry]:::endClass end ifrs(Internal File Registry Service):::srcClass -- |\"file_registered\"| ifrs_internal_file_registry[internal_file_registry] ifrs_internal_file_registry[internal_file_registry] -- |\"file_registered\"| dcs(Download Controller Service):::srcClass ifrs_internal_file_registry[internal_file_registry] -- |\"file_registered\"| ucs(Upload Controller Service):::srcClass subgraph c1 [consumers] dcs(Download Controller Service) click dcs \"../dcs\" ucs(Upload Controller Service) click ucs \"../ucs\" end ifrs_internal_file_registry:::endClass ifrs(Internal File Registry Service):::srcClass -- |\"file_staged_for_download\"| ifrs_internal_file_registry[internal_file_registry] subgraph c1 [consumers] end ifrs_internal_file_registry:::endClass click ifrs \"../ifrs\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Consumed #  REST API #  This service not relies on any REST endpoints\nEvents #  This service consumes the following events through the message broker:\n   Topic Type Producers     file_interrogation file_validation_success Interrogation Room Service   file_downloads file_stage_requested     %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph c1 [consumer] ifrs(Internal File Registry Service):::srcClass end subgraph t1 [topics] ifrs_file_interrogation[file_interrogation]:::endClass ifrs_file_downloads[file_downloads]:::endClass end todo(TODO):::srcClass -- |\"file_validation_success\"| ifrs_file_interrogation[file_interrogation] ifrs_file_interrogation[file_interrogation] -- |\"file_validation_success\"| ifrs click ifrs \"../ifrs\" todo(TODO):::srcClass -- |\"file_stage_requested\"| ifrs_file_downloads[file_downloads] ifrs_file_downloads[file_downloads] -- |\"file_stage_requested\"| ifrs click ifrs \"../ifrs\" todo(TODO):::srcClass todo(TODO):::srcClass click todo(TODO) \"../\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Configuration #  The service can be configured using the following configuration variables:\n   Name Description     kafka_servers A list of Apache Kafka servers to connect to   file_registered_event_topic An Apache Kafka event topic   file_registered_event_type An Apache Kafka event schema   files_to_register_topic An Apache Kafka event topic   files_to_register_type An Apache Kafka event schema   file_staged_event_topic An Apache Kafka event topic   file_staged_event_type An Apache Kafka event schema   files_to_stage_topic An Apache Kafka event topic   files_to_stage_type An Apache Kafka event schema   db_connection_str The MongoDB connection URI   db_name The MongoDB database name   s3_endpoint_url The S3 endpoint URL   s3_access_key_id The S3 access key ID   s3_secret_access_key The S3 secret access key    "},{"id":4,"href":"/integration/docs/services/irs/","title":"Interrogation Room Service","section":"Docs","content":"Interrogation Room Service #  0.0.0-19-f87dd1b-main\nghga-de/interrogation-room-service\nghga/interrogation-room-service\nSummary #  Provided #  REST API #  This service provides no REST API endpoints\nEvents #  This service publishes the following event types through a message broker:\n   Topic Type Consumers     file_interrogation file_validation_success Internal File Registry Service   file_interrogation file_validation_failure Upload Controller Service     mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph t1 [topics] irs_file_interrogation[file_interrogation]:::endClass end irs(Interrogation Room Service):::srcClass -- |\"file_validation_success\"| irs_file_interrogation[file_interrogation] irs_file_interrogation[file_interrogation] -- |\"file_validation_success\"| ifrs(Internal File Registry Service):::srcClass subgraph c1 [consumers] ifrs(Internal File Registry Service) click ifrs \"../ifrs\" end irs_file_interrogation:::endClass irs(Interrogation Room Service):::srcClass -- |\"file_validation_failure\"| irs_file_interrogation[file_interrogation] irs_file_interrogation[file_interrogation] -- |\"file_validation_failure\"| ucs(Upload Controller Service):::srcClass subgraph c1 [consumers] ucs(Upload Controller Service) click ucs \"../ucs\" end irs_file_interrogation:::endClass click irs \"../irs\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Consumed #  REST API #  This service relies on the following REST endpoints:\n   Service Method Path     ekss /secrets POST    %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph irs [Interrogation Room Service] end irs:::srcClass click irs \"../irs\" subgraph ekss [Encryption Key Store Service] 0[\"/secrets\"] end ekss:::srcClass 0:::endClass click 0 \"../ekss\" irs ---|\"POST\"| 0 classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Events #  This service consumes the following events through the message broker:\n   Topic Type Producers     file_uploads file_upload_received Upload Controller Service    %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph c1 [consumer] irs(Interrogation Room Service):::srcClass end subgraph t1 [topics] irs_file_uploads[file_uploads]:::endClass end todo(TODO):::srcClass -- |\"file_upload_received\"| irs_file_uploads[file_uploads] irs_file_uploads[file_uploads] -- |\"file_upload_received\"| irs click irs \"../irs\" todo(TODO):::srcClass click todo(TODO) \"../\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Configuration #  The service can be configured using the following configuration variables:\n   Name Description     kafka_servers A list of Apache Kafka servers to connect to   interrogation_success_topic An Apache Kafka event topic   interrogation_success_type An Apache Kafka event schema   interrogation_failure_topic An Apache Kafka event topic   interrogation_failure_type An Apache Kafka event schema   upload_received_event_topic An Apache Kafka event topic   upload_received_event_type An Apache Kafka event schema   s3_endpoint_url The S3 endpoint URL   s3_access_key_id The S3 access key ID   s3_secret_access_key The S3 secret access key    "},{"id":5,"href":"/integration/docs/services/ucs/","title":"Upload Controller Service","section":"Docs","content":"Upload Controller Service #  0.3.0-18-g0b8060e-main\nghga-de/upload-controller-service\nghga/upload-controller-service\nSummary #  Provided #  REST API #  This service provides a REST API with the following endpoints:\nOpen in Swagger Editor\n   Method Path Consumers     GET /files/{file_id}    POST /uploads    GET /uploads/{upload_id}    PATCH /uploads/{upload_id}    POST /uploads/{upload_id}/parts/{part_no}/signed_urls     Events #  This service publishes the following event types through a message broker:\n   Topic Type Consumers     file_uploads file_upload_received Interrogation Room Service     mermaid.initialize({ \"flowchart\": { \"useMaxWidth\":true }, \"theme\": \"default\" } ) %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph t1 [topics] ucs_file_uploads[file_uploads]:::endClass end ucs(Upload Controller Service):::srcClass -- |\"file_upload_received\"| ucs_file_uploads[file_uploads] ucs_file_uploads[file_uploads] -- |\"file_upload_received\"| irs(Interrogation Room Service):::srcClass subgraph c1 [consumers] irs(Interrogation Room Service) click irs \"../irs\" end ucs_file_uploads:::endClass click ucs \"../ucs\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Consumed #  REST API #  This service not relies on any REST endpoints\nEvents #  This service consumes the following events through the message broker:\n   Topic Type Producers     metadata file_metadata_upserts    internal_file_registry file_registered Internal File Registry Service   file_interrogation file_validation_failure Interrogation Room Service    %%{ init: { 'flowchart': { 'useMaxWidth': true, 'curve': 'linear' } } }%% flowchart LR subgraph c1 [consumer] ucs(Upload Controller Service):::srcClass end subgraph t1 [topics] ucs_internal_file_registry[internal_file_registry]:::endClass ucs_file_interrogation[file_interrogation]:::endClass ucs_metadata[metadata]:::endClass end todo(TODO):::srcClass -- |\"file_metadata_upserts\"| ucs_metadata[metadata] ucs_metadata[metadata] -- |\"file_metadata_upserts\"| ucs click ucs \"../ucs\" todo(TODO):::srcClass -- |\"file_registered\"| ucs_internal_file_registry[internal_file_registry] ucs_internal_file_registry[internal_file_registry] -- |\"file_registered\"| ucs click ucs \"../ucs\" todo(TODO):::srcClass -- |\"file_validation_failure\"| ucs_file_interrogation[file_interrogation] ucs_file_interrogation[file_interrogation] -- |\"file_validation_failure\"| ucs click ucs \"../ucs\" todo(TODO):::srcClass todo(TODO):::srcClass todo(TODO):::srcClass click todo(TODO) \"../\" classDef srcClass fill:#CFE7CD,color:#00393F classDef endClass fill:#007E8C,color:#FFFFFF Configuration #  The service can be configured using the following configuration variables:\n   Name Description     host The hostname or IP address to bind the HTTP server to   port The port to bind the HTTP server to   kafka_servers A list of Apache Kafka servers to connect to   upload_accepted_event_topic An Apache Kafka event topic   upload_accepted_event_type An Apache Kafka event schema   upload_rejected_event_topic An Apache Kafka event topic   upload_rejected_event_type An Apache Kafka event schema   upload_received_event_topic An Apache Kafka event topic   upload_received_event_type An Apache Kafka event schema   file_metadata_event_topic An Apache Kafka event topic   file_metadata_event_type An Apache Kafka event schema   db_connection_str The MongoDB connection URI   db_name The MongoDB database name   s3_endpoint_url The S3 endpoint URL   s3_access_key_id The S3 access key ID   s3_secret_access_key The S3 secret access key    "}]