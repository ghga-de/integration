<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on GHGA Integration Documentation</title>
    <link>https://ghga-de.github.io/integration/docs/</link>
    <description>Recent content in Docs on GHGA Integration Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Apr 2023 08:08:19 +0000</lastBuildDate><atom:link href="https://ghga-de.github.io/integration/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service Communications</title>
      <link>https://ghga-de.github.io/integration/docs/services/service_communications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ghga-de.github.io/integration/docs/services/service_communications/</guid>
      <description>Events #  The diagram summarizes the event-base communication between all microservices. Kafka is used as the message broker.
 mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) %%{ init: { &#39;flowchart&#39;: { &#39;useMaxWidth&#39;: true, &#39;curve&#39;: &#39;linear&#39; } } }%% flowchart TB click ifrs &#34;../ifrs&#34; ifrs(Internal File Registry Service):::srcClass -- |&#34;file_registered&#34;| ifrs_internal_file_registry[internal_file_registry] ifrs_internal_file_registry[internal_file_registry] -- |&#34;file_registered&#34;| dcs(Download Controller Service):::srcClass click dcs &#34;../dcs&#34; ifrs_internal_file_registry[internal_file_registry] -- |&#34;file_registered&#34;| ucs(Upload Controller Service):::srcClass click ucs &#34;</description>
    </item>
    
    <item>
      <title>Download Controller Service</title>
      <link>https://ghga-de.github.io/integration/docs/services/dcs/</link>
      <pubDate>Thu, 27 Apr 2023 08:08:19 +0000</pubDate>
      
      <guid>https://ghga-de.github.io/integration/docs/services/dcs/</guid>
      <description>Download Controller Service #  0.4.0-14-g4315c66-main
ghga-de/download-controller-service
ghga/download-controller-service
Summary #  Provided #  REST API #  This service provides a REST API with the following endpoints:
Open in Swagger Editor
   Method Path Consumers     GET /objects/{object_id}     Events #  This service publishes the following event types through a message broker:
   Topic Type Consumers     file_downloads download_served    file_downloads file_registered    file_downloads unstaged_download_requested     Consumed #  REST API #  This service not relies on any REST endpoints</description>
    </item>
    
    <item>
      <title>Encryption Key Store Service</title>
      <link>https://ghga-de.github.io/integration/docs/services/ekss/</link>
      <pubDate>Thu, 27 Apr 2023 08:08:19 +0000</pubDate>
      
      <guid>https://ghga-de.github.io/integration/docs/services/ekss/</guid>
      <description>Encryption Key Store Service #  0.0.0-22-4d92c54-main
ghga-de/encryption-key-store-service
ghga/encryption-key-store-service
Summary #  Provided #  REST API #  This service provides a REST API with the following endpoints:
Open in Swagger Editor
   Method Path Consumers     POST /secrets Interrogation Room Service   GET /secrets/{secret_id}/envelopes/{client_pk}      mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;theme&#34;: &#34;default&#34; } ) %%{ init: { &#39;flowchart&#39;: { &#39;useMaxWidth&#39;: true, &#39;curve&#39;: &#39;linear&#39; } } }%% flowchart RL subgraph ekss [Encryption Key Store Service] 0[&#34;</description>
    </item>
    
    <item>
      <title>Internal File Registry Service</title>
      <link>https://ghga-de.github.io/integration/docs/services/ifrs/</link>
      <pubDate>Thu, 27 Apr 2023 08:08:19 +0000</pubDate>
      
      <guid>https://ghga-de.github.io/integration/docs/services/ifrs/</guid>
      <description>Internal File Registry Service #  0.3.0-20-g82f39eb-main
ghga-de/internal-file-registry-service
ghga/internal-file-registry-service
Summary #  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque pellentesque posuere ante, ac porttitor nulla eleifend quis. Mauris eget aliquam diam. Duis laoreet blandit luctus. Donec at lacus porta, bibendum lectus dignissim, eleifend est. Etiam sit amet blandit dui. Cras id ante et neque hendrerit vulputate non aliquam eros.
Provided #  REST API #  This service provides no REST API endpoints</description>
    </item>
    
    <item>
      <title>Interrogation Room Service</title>
      <link>https://ghga-de.github.io/integration/docs/services/irs/</link>
      <pubDate>Thu, 27 Apr 2023 08:08:19 +0000</pubDate>
      
      <guid>https://ghga-de.github.io/integration/docs/services/irs/</guid>
      <description>Interrogation Room Service #  0.0.0-19-f87dd1b-main
ghga-de/interrogation-room-service
ghga/interrogation-room-service
Summary #  Provided #  REST API #  This service provides no REST API endpoints
Events #  This service publishes the following event types through a message broker:
   Topic Type Consumers     file_interrogation file_validation_success Internal File Registry Service   file_interrogation file_validation_failure Upload Controller Service     mermaid.initialize({ &#34;flowchart&#34;: { &#34;useMaxWidth&#34;:true }, &#34;</description>
    </item>
    
    <item>
      <title>Upload Controller Service</title>
      <link>https://ghga-de.github.io/integration/docs/services/ucs/</link>
      <pubDate>Thu, 27 Apr 2023 08:08:19 +0000</pubDate>
      
      <guid>https://ghga-de.github.io/integration/docs/services/ucs/</guid>
      <description>Upload Controller Service #  0.3.0-18-g0b8060e-main
ghga-de/upload-controller-service
ghga/upload-controller-service
Summary #  Provided #  REST API #  This service provides a REST API with the following endpoints:
Open in Swagger Editor
   Method Path Consumers     GET /files/{file_id}    POST /uploads    GET /uploads/{upload_id}    PATCH /uploads/{upload_id}    POST /uploads/{upload_id}/parts/{part_no}/signed_urls     Events #  This service publishes the following event types through a message broker:</description>
    </item>
    
  </channel>
</rss>
